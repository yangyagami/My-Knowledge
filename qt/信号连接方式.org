#+TITLE: 信号连接方式
#+AUTHOR: Yangsiyu
#+DATE: <2025-02-26 三>
#+EMAIL: a651685099@163.com

*QObject::connect() itself is thread-safe.*

+ Qt::AutoConnection
  (Default) If the receiver lives in the thread that emits the signal, Qt::DirectConnection is used. Otherwise, Qt::QueuedConnection is used. The connection type is determined when the signal is emitted.
+ Qt::DirectConnection
  The slot is invoked immediately when the signal is emitted. *The slot is executed in the signalling thread.*
+ Qt::QueuedConnection
  The slot is invoked when control returns to the event loop of the receiver's thread. The slot is executed in the receiver's thread.
+ Qt::BlockingQueuedConnection
  Same as Qt::QueuedConnection, except that the signalling thread blocks until the slot returns. This connection must not be used if the receiver lives in the signalling thread, or else the application will deadlock.
+ Qt::UniqueConnection
  This is a flag that can be combined with any one of the above connection types, using a bitwise OR. When Qt::UniqueConnection is set, QObject::connect() will fail if the connection already exists (i.e. if the same signal is already connected to the same slot for the same pair of objects).  
+ Qt::SingleShotConnection
  This is a flag that can be combined with any one of the above connection types, using a bitwise OR. When Qt::SingleShotConnection is set, the slot is going to be called only once; the connection will be automatically broken when the signal is emitted. This flag was introduced in Qt 6.0.

With queued connections, the parameters must be of types that are known to Qt's meta-object system, because Qt needs to copy the arguments to store them in an event behind the scenes. If you try to use a queued connection and get the error message:

#+begin_src shell
  QObject::connect: Cannot queue arguments of type 'MyType'
#+end_src

Call qRegisterMetaType() to register the data type before you establish the connection.
