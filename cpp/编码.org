#+TITLE: 编码与字符集
#+DATE: <2024-11-13 三>
#+AUTHOR: 杨思宇

在 C++11 标准中添加两种新的字符类型 char16_t 和 char32_t ，它们分别用来对应 Unicode 字符集的 UTF-16 和 UTF-32 两种编码方法。在正式介绍它们之前，需要先弄清楚字符集和编码方法的区别。

* 字符集和编码方法
通常我们所说的字符集是指系统支持的所有抽象字符的集合，通常一个字符集的字符是稳定的。而编码方法是利用数字和字符集建立对应关系的一套方法。

常见编码方法：
- Unicode 字符集
  - UTF-8
  - UTF-16
  - UTF-32
- ASCII 字符集
- GB2312 字符集
- BIG5 字符集
... 等等。

UTF-8、UTF-16和UTF-32简单来说是使用不同大小内存空间的编码方法。

*Unicode 字符集的最大个数为 0x10FFFF*

* UTF-32
UTF-32 是最简单的编码方法，该方法用一个 32 位的内存空间（也就是 4 字节）存储一个字符编码，由于 Unicode 字符集的最大个数为 0x10FFFF（ISO 10646）​，因此 4 字节的空间完全能够容纳任何一个字符编码。UTF-32 编码方法的优点显而易见，它非常简单，计算字符串长度和查找字符都很方便；缺点也很明显，太占用内存空间。

* UTF-16
UTF-16 编码方法所需的内存空间从 32 位缩小到 16 位（占用 2 字节）​，但是由于存储空间的缩小，因此 UTF-16 最多只能支持 0xFFFF 个字符，这显然不太够用，于是 UTF-16 采用了一种特殊的方法来表达无法表示的字符。简单来说，从 0x0000～0xD7FF 以及 0xE000～0xFFFF 直接映射到 Unicode 字符集，而剩下的 0xD800～0xDFFF 则用于映射 0x10000～0x10FFFF 的 Unicode 字符集，映射方法为：字符编码减去 0x10000 后剩下的 20 比特位分为高位和低位，高 10 位的映射范围为 0xD800～0xDBFF，低 10 位的映射范围为 0xDC00～0xDFFF 。
#+BEGIN_EXAMPLE
例如字符编码： 0x10437，减去 0x10000 后的高低位分别为 0x1 和 0x37，分别加上 0xD800 和 0xDC00 的结果是 0xD801 和 0xDC37。

运算过程：
0x10437 - 0x10000 = 0x00437 = (0b0000000001 contact 0000110111)
0xD800 + 0x1 = 0xD801
0xDC00 + 0x37 = 0xDC37
#+END_EXAMPLE

* UTF-8
UTF-8 编码方法，它是一种可变长度的编码方法。由于 UTF-8 编码方法只占用 8 比特位（1 字节）​，因此要表达完数量高达 0x10FFFF 的字符集，它采用了一种前缀编码的方法。这个方法可以用 1～4 字节表示字符个数为 0x10FFFF 的 Unicode（ISO 10646）字符集。为了尽量节约空间，常用的字符通常用 1～2 字节就能表达，其他的字符才会用到 3～4 字节，所以在内存空间可以使用 UTF-8，但是计算字符串长度和查找字符在 UTF-8 中却是一个令人头痛的问题。
| 代码范围                                                 | UTF-8 二进制                          | 注释                                   |
| 0x000000 ~ 0x00007f （128 个代码）                       | 0b0zzzzzzz                          | ASCII 字符范围，字节由 0 开始             |
| 0x000080 ~ 0x0007FF （1920 个代码）                      | 110yyyyy 10zzzzzz                   | 第一个字节由 110 开始，接着的字节 10 开始    |
| 0x000800 ~ 0x00D7FF 0x00E000 ~ 0x00FFFF （61440 个代码） | 1110xxxx 10yyyyyy 10zzzzzz          | 第一个字节由 1110 开始，接着的字节由 10 开始 |
| 010000 ~ 10FFFF （1048576 个代码）                       | 11110www 10xxxxxx 10yyyyyy 10zzzzzz | 由 11110 开始，接着的字节从 10 开始        |
UTF-8 实际占用 (1 ~ 4) 字节。

