#+TITLE: 封装、继承、多态
#+AUTHOR: Yangsiyu
#+DATE: <2025-02-26 三>
#+EMAIL: a651685099@163.com

*封装、继承和多态是面向对象编程（OOP）的三大核心特性，它们不仅是语法层面的工具，更是软件设计的哲学。*

* 封装（Encapsulation)
1. 底层机制
   - *数据隐藏*:通过访问修饰符（private/protected/public）控制对象的属性和方法的可见性。
   - *接口暴露*:仅对外提供必要的方法（getter/setter 或操作接口），隐藏内部实现细节。
   - *内存安全*:封装确保外部代码无法直接修改对象内部状态，避免内存越界或不合理赋值（例如负数年龄）。
2. 设计哲学
   - *最小权限原则*:每个对象只暴露完成其职责的最小接口，降低模块间的耦合。
   - *抽象屏障*:封装将复杂的内部逻辑抽象为简单接口，例如文件读写无需关心磁盘扇区操作。
   - *不变式保护*:通过方法约束对象状态，例如银行账户的 withdraw() 方法保证余额不为负。

* 继承（Inheritance）
1. 底层机制
    - *方法表（VTable）*:子类继承父类的方法表，重写方法时替换对应指针，实现动态绑定。
    - *内存布局*:子类实例包含父类数据成员的内存空间，形成“is-a”关系。
    - *构造函数链*:子类构造函数隐式或显式调用父类构造函数（super()）。
2. 设计哲学
    - *Liskov替换原则（LSP）*:子类必须能够替换父类，保持行为一致性。
    - *白箱复用*:继承允许子类直接访问父类内部细节，但可能导致过度耦合。
    - *层次化抽象*:通过抽象类和接口定义高层契约，例如 InputStream 派生 FileInputStream。
3. 高级权衡
    - *组合优于继承*:继承破坏封装（子类依赖父类实现），组合通过持有对象委托更灵活。
    - *接口多继承*:Java/C#通过接口支持多继承，避免菱形问题（如C++虚继承）。

* 多态（Polymorphism）
1. 底层机制
    - *静态多态*:编译时通过方法重载（Overload）或模板（C++）实现。
    - *动态多态*:运行时通过虚方法表（Java/C#）或消息转发（Objective-C）动态绑定方法。
    - *类型擦除*:Java 泛型在编译后擦除具体类型，通过强制转换实现多态容器。
2. 设计哲学
    - *开闭原则（OCP）*:多态允许扩展新功能（新增子类）而不修改现有代码。
    - *依赖倒置*:高层模块依赖抽象接口（如 List），而非具体实现（如 ArrayList）。
    - *鸭子类型*:Python 等动态语言的多态基于行为而非继承（“像鸭子一样叫就是鸭子”）。
3. 高级应用
    - *策略模式*:通过多态动态替换算法（例如排序策略）。
    - *依赖注入*:框架通过接口注入具体实现（如 Spring 的 @Autowired）。
