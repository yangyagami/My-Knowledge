#+TITLE: 面向对象
#+DATE: <2025-03-10 一>
#+AUTHOR: yangsiyu

面向对象程序由对象组成，对象包括数据和对数据进行操作的过程，过程通常称为方法或操作。对象在收到客户的请求（或消息）后，执行相应的操作。
客户请求是使对象执行操作的唯一方法，操作又是对象改变内部数据的唯一方法。由于这些限制，对象的内部状态是被封装的，它不能被直接访问，它的表示对于对象外部是不可见的。

* 接口
[[https://weread.qq.com/web/reader/0eb32540813ab9066g019237k70e32fb021170efdf2eca12][对象接口]]
对象声明的每一个操作指定操作名、作为参数的对象和返回值，这就是所谓的操作的 *型构(signature)* 。
对象操作所定义的所有操作型构的集合被称为该对象的 *接口(interface)* 。
对象接口描述了该对象所能接受的全部请求的集合，任何匹配对象接口中型构的请求都可以发送给该对象。

*NOTE: 接口是集合*

类型(type)是一个用来标识特定接口的名字。如果一个对象接受“Window”接口所定义的所有操作请求，那么我们就说该对象具有“Window”类型。一个对象可以有许多类型，并且不同的对象可以共享同一个类型。
对象接口的某部分可以用某个类型来刻画，而其他部分则可用其他类型刻画。两个类型相同的对象只需要共享它们的部分接口。
*接口可以包含其他接口作为子集。* 当一个类型的接口包含另一个类型的接口时，我们就说它是另一个类型的子类型(subtype)，而称另一个类型为它的超类型(supertype)。 *我们常说子类型继承了它的超类型的接口。*

* 动态绑定
当给对象发送请求时，所引起的具体操作既与请求本身有关又与接受对象有关。支持相同请求的不同对象可能对请求激发的操作有不同的实现。发送给对象的请求和它的相应操作在运行时的连接就称为 *动态绑定(dynamic binding)。* [[./封装、继承、多态.org]]

* 抽象类
抽象类(abstract class)的主要目的是为它的子类定义公共接口。抽象类将把它的部分或全部操作的实现延迟到子类中，因此， *抽象类不能被实例化* 。在抽象类中定义却没有实现的操作被称为抽象操作(abstract operation)。非抽象类称为具体类(concrete class)。

只根据抽象类中定义的接口来操纵对象有以下两个好处：
  - 客户无须知道他们使用对象的特定类型，只需要知道对象有客户所期望的接口。
  - 客户无须知道他们使用的对象是用什么类来实现的，只需要知道定义接口的抽象类。
这将极大地减少子系统实现之间的相互依赖关系，也产生了可复用的面向对象设计的如下原则：
*针对接口编程，而不是针对实现编程。*
    
* 混入类
混入类(mixin class)是给其他类提供可选择的接口或功能的类。它与抽象类一样不能实例化。混入类要求多继承。
[[https://weread.qq.com/web/reader/0eb32540813ab9066g019237k6f4322302126f4922f45dec][图例]]
