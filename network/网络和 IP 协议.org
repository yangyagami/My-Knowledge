#+TITLE: 网络和地址
#+AUTHOR: Yangsiyu
#+DATE: <2025-03-01 Sat>
#+EMAIL: a651685099@163.com

计算机网络可以认为是一个 *双向管道（读和写）* 。

* 网络程序
  - 通过网络进行读写。
  - 主要模型：双向的、可靠的字节流连接。（底层实际没有链接这种东西）
    - 一端负责读取，剩余的则是写入。
    - 双向的。
    - 可靠的（除非连接断开）。

     Write -----------------------------> Read
Machine                                     Machine
     Read <------------------------------ Write

* 四层网络模型
| Application | 应用层 (HTTP，HTTPS，WebSocket) |
| Transport   | 传输层 (TCP/IP，UDP)            |
| Network     | 网络层 (IP 协议)                |
| Link        | 链路层 (以太网、无线)           |

** 网络层
*如果我们用网络层，那么一定用 IP 协议。*
TCP   UDP   RTP
       IP
以太网 无线网 4G 5G

网络层数据包：[DATA][FROM][TO]
数据传输：
  - 发送：Application -> Transport -> Network -> Link
  - 接受：Link -> Network -> Transport -> Application

网络层 must 使用 *互联网协议（Internet Protocol）* ，也就是 IP 。
  - IP 协议负责把数据包发送到目的地，但是不做任何保证。
  - 数据包可能会丢失、乱序、损坏。

** 传输层
传输层协议有 TCP/IP （Transmission Control Protocol） 、UDP （User Datagram Protocol）。
  - TCP 保证数据包完整、正确，并且按顺序传递到接收端。如果数据有丢失，TCP 会多次尝试发送。
  - UDP 不做保证。
  - 等等。

** 应用层
App 有自己的协议，比如 HTTP 。

* 七层网络模型（Open Systems Interconnection, OSI)
| Application  |  Application |
| Presentation |              |
| Session      |  Transport   |
| Transport    |              |
| Network      |  Network     |
| Link         |  Link        |
| Physical     |              |

* IP 协议
链路层数据报文格式：[Link Data][Link Hdr]。
IP 协议数据报文格式：[IP Data][IP Hdr]。
传输层数据报文格式：[Data][Hdr]。

*上层数据报文发送给下层的数据段。*
[Data][Hdr] （Transport Segment)
     |
     to
[IP Data（Transport Segment)][IP Hdr]
     |
     to
[Link Data （IP Segment）            ][Link Hdr]

IP 协议可以由 4 个属性描述：
| Property       | Behavior              |
|----------------+-----------------------|
| Datagram       | 独立的路由包，逐跳路由 |
| Unreliable     | 数据包可能被丢弃       |
| Best effort    | 必要时，会丢弃数据     |
| Connectionless | 无状态、无连接         |

IP 协议可以类比物流服务。数据像快递一样，逐跳（HOP）到达目的地。

*为什么 IP 服务如此简单*:
  - 更快、低成本、更好维护。
  - 端到端原则：尽可能让目标端实现更多功能，而不是网络。
  - 允许在其上构建可靠或不可靠的协议。（TCP/IP 、UDP）。
  - IP 在任何链路层上都可以工作（因为协议简单，很好实现）。

** IP 服务模型（详细）
IP 协议还是做了一些事情：
  1. IP 协议会阻止报文循环。（路由器的转发表可能出错，会导致数据报文在同一路径循环。）
     - IP 在 Header 有一个 TTL(Time to live) 字段，它从 128 这样的数字开始，每经过一个路由器就会递减，如果为 0, 就丢弃这个数据包。
  2. 数据包如果过长，会分段。
  3. *IP Header 有一个校验和，确保报文到达正确目的地。*
  4. 现今有两个版本协议：IPv4(32 bit) 、IPv6(128 bit)
  5. IP 头部可以添加新选项。

[[./ipv4 datagram.PNG]]

* 数据包的生命周期
application: stream of data
        |
        to
transport: segments of data
        |
        to
network: packets of data

** TCP Byte Stream
*TCP 建立连接需要 3 次握手。*
总结为：SYN, SYN ACK, ACK （同步、同步确认、确认）。
  1. 客户端向服务器发送 SYN 消息。
  2. 服务端向客户端发送 SYN ACK(ACKNOWLEDGE) 消息。
  3. 客户端响应并且确认服务器的同步，发送 ACK 消息。

** Inside the Stream
客户端和服务器之间的 IP 数据包经过多次跳跃（hops), 其中跳跃（hop）是连接两个路由器的链路。
[[./inside the stream.png]]

** Inside Each Hop
路由器通过转发表来决定哪条链路最合适。
[[./inside each hop.png]]

*traceroute 可以追踪路由路径*, 例如：
#+BEGIN_SRC bash
  traceroute -w 1 www.baidu.com
#+END_SRC

#+RESULTS:
traceroute to www.baidu.com (110.242.70.57), 30 hops max, 60 byte packets
 1  _gateway (192.168.42.129)  0.860 ms  0.924 ms  0.974 ms
 2  172.168.0.1 (172.168.0.1)  5.821 ms  5.900 ms  5.873 ms
 3  100.100.100.1 (100.100.100.1)  44.679 ms  44.798 ms  44.864 ms
 4  125.35.84.1 (125.35.84.1)  5.472 ms  6.024 ms  6.106 ms
 5  * * 124.65.227.253 (124.65.227.253)  4.838 ms
 6  221.216.106.85 (221.216.106.85)  6.593 ms  5.562 ms  5.602 ms
 7  125.33.186.41 (125.33.186.41)  5.830 ms 124.65.194.17 (124.65.194.17)  5.624 ms *
 8  219.158.118.50 (219.158.118.50)  9.209 ms * *
 9  110.242.66.166 (110.242.66.166)  12.002 ms 110.242.66.186 (110.242.66.186)  15.393 ms 110.242.66.190 (110.242.66.190)  12.034 ms
10  221.194.45.134 (221.194.45.134)  12.103 ms  13.540 ms  13.425 ms
11  * * *
12  * * *
13  * * *
14  * * *
15  * * *
16  * * *
17  * * *
18  * * *
19  * * *
20  * * *
21  * * *
22  * * *
23  * * *
24  * * *
25  * * *
26  * * *
27  * * *
28  * * *
29  * * *
30  * * *

* Packet Switching
定义：
  - Packet 是一个包含自身数据的单元，它携带到达目的地所需要的信息。
  - Packet Switching 是指为每个到达的数据包， *分别* 选择它的出站链路，如果链路是闲置的，那么发送它，否则，延迟发送。
  - Packet Switching 的思想是将数据分解成离散的，自包含的数据块。

优点：
  - 交换机可以对每个数据包进行独立的本地决策。
  - 高效共享链路。

* Layering
优点：
  - 模块化
  - 好的定义
  - 可重用
  - 分离关注点
  - 持续改进
  - 点对点通信（针对网络）

* 内存、字节序、包格式
x86 处理器通常是小端，arm 处理器通常是大端。
*网络字节序是大端。*

有一些辅助函数可以转换字节序：
  short 类型（host to network short）：
    htons()、ntohs()
  int 类型（host to network long）：
    htonl()、ntohl()
