#+TITLE: OpenCL异构并行计算：原理、机制与优化实践
#+DATE: <2025-09-19 五>
#+AUTHOR: yangsiyu

* 序一
OpenCL 由 Khronos 国际标准组织发布与维护，是一种针对通用并行计算的开放行业标准和跨厂商解决方案。

* 序二
计算机的基础组成在过去的十几年发生了很多变化，从单核处理器发展到多核处理器，然后发展到“众核”处理器，高效性的需求一直促进着处理器的发展，最终走到“异构处理器”​，如 CPU 和 GPU 的结合，CPU 和 [[https://zhuanlan.zhihu.com/p/117974989][FPGA（Field-Programmable Gate Array 现场可编程门序列）]] 的结合。

* 前言
2008 年，在苹果公司将自己撰写的 OpenCL 草案开放给 Khronos Group（开放标准组织）之后，Khronos Group 在 6 个月的时间内发布了 OpenCL 1.0 标准。这不仅引起了像 Intel、NVIDIA、AMD 这类传统CPU和GPU处理器厂商的关注，而且还吸引了像 TI 这类做 DSP 的公司，以及 Altera 这类做 FPGA 的公司。因为 OpenCL 将基于 GPU 的高性能计算概念做了更广范的延展，从 NVIDIA 扩展到几乎所有的硬件厂商，从 GPU 扩展到 CPU、DSP 和 FPGA 等，从高性能计算集群扩展到云、桌面和移动，我们称之为异构并行计算，而 GPU 计算是异构并行计算的一种。

目前，即便是 CPU 也能通过 OpenCL 实现其内部的 SIMD（单指令多数据） 操作，从而能达到更快速的数据处理。

** 如何阅读本书
当然，考虑到很多工程学、经济学等方面的专家对计算机相关的理论知识掌握有限，而且此类读者往往更偏向于OpenCL工具的运用，因此我们建议这类读者可以略过整个5.6节以及整个第8章。虽然本书尽可能通俗而又简洁地去介绍大部分OpenCL 2.0标准中所涉及的概念，但是很多概念没有一定基础仍然会比较难以理解，因此读者在遇到这样的概念时可以先实践，然后慢慢消化。

* 第1章 异构并行计算的过去、现状和未来
异构并行计算包含两个方面的内容：异构和并行。异构是指：计算单元由不同的多种处理器组成，如 X86 CPU+GPU、ARM CPU+GPU、X86 CPU+FPGA、ARM CPU + DSP 等。并行是指：要发挥异构硬件平台的全部性能必须要使用并行的编程方式。这通常包含两个层次的内容：

1. 多个不同架构的处理器同时计算，要发挥异构系统中所有处理器的性能，可通过并行编程使每个处理器都参与运算，避免处理器闲置。相比于只让某一种类型的处理器参与工作，这种方式提高了性能上限，简单举例来说，在 X86 CPU+GPU 平台上，X86 CPU 的计算能力为 1 TFLOPS，GPU 的计算能力为 4 TFLOPS，如果只使用 GPU，那么最大可发挥的性能是 4 TFLOPS，而如果加上X86 CPU，则最大可发挥的性能是 5 TFLOPS。
    
2. 每个处理器都是多核向量处理（指支持 MIMD（多指令多数据） 执行或 SIMD 指令集的处理器），这要求使用并行编程以发挥每个处理器的计算能力。通常每个处理器包括多个核心，每个核心包含一个或多个长向量，如 AMD [[https://en.wikipedia.org/wiki/Graphics_Core_Next][GCN]] GPU 中就包含数量不等的核心，每个核心包含 4 个向量，每个向量能够同时处理 16 个 4 字节长度的数据。如果没能很好地并行，则可能不能完美地发挥多核和向量化的性能。

在具体介绍异构并行计算的历史、现状和未来之前，笔者想介绍几个始终贯穿本书的相关概念：

1. 向量化。向量化是一种一条指令同时处理多个数据的方法，从这一点来说，它是一种数据并行技术。主流的向量化技术有两种：SIMD（Single Instruction Multiple Data，单指令多数据）和 SIMT（Single Instruction Multiple Thread，单指令多线程）​，大多数 CPU（如 AMD Zen 处理器）都使用 SIMD 向量化技术，而大多数 GPU（如AMD GCN）都使用 SIMT 向量化技术。关于 SIMD 的具体描述请参看图1-1。

[[./图 1-1 向量化示例.png]]

