#+TITLE: 设计模式：可复用面向对象软件的基础
#+DATE: <2025-09-27 六>
#+AUTHOR: yangsiyu

* 读者指南
本书包括两个主要部分：
  1. 第一部分（第 1 和 2 章）介绍了什么是设计模式以及它如何帮助你设计面向对象的软件系统。该部分包含了一个设计案例研究，展示了如何将设计模式应用于实际工作。
  2. 第二部分（第 3 ~ 5 章）则是实际设计模式的分类描述。

模式的分类描述构成了本书的主要部分，根据模式的性质本书将其划分为三种类型：
  - 创建型(creational)
  - 结构型(structural)
  - 行为型(behavioral)

你可以翻到书中的 1.6 节查找有关设计可复用的面向对象系统过程中经常遇到的问题，然后阅读解决这些问题的有关模式。

最简单常用的模式：
  - Abstract Factory(3.1)
  - Adapter(4.1)
  - Composite(4.3)
  - Decorator(4.4)
  - Factory Method(3.3)
  - Observer(5.7)
  - Strategy(5.9)
  - Template Method(5.10)

* 第一章 引言
设计面向对象软件比较困难，而设计可复用的面向对象软件就更加困难。你必须找到相关的对象，以适当的 *粒度* 将它们归类，再定义类的接口和继承层次，建立对象之间的基本关系。你的设计应该对手头的问题有针对性，同时对将来的问题和需求也要有足够的通用性。你也希望避免重复设计或尽可能少做重复设计。有经验的面向对象设计者会告诉你，要一下子就得到复用性和灵活性好的设计，即使不是不可能的至少也是非常困难的。一个设计在最终完成之前经常要被复用好几次，而且每一次都有所修改。

** 什么是设计模式
一般而言，一个模式有四个基本要素：
  - 模式名(pattern name)
    一个助记名，它用一两个词来描述模式的问题、解决方案和效果。命名一个新的模式增加了我们的设计词汇。设计模式允许我们在较高的抽象层次上进行设计。基于一个模式词汇表，我们自己以及同事之间就可以讨论模式并在编写文档时使用它们。模式名可以帮助我们思考，便于我们与其他人交流设计思想及设计结果。找到恰当的模式名也是我们设计模式编目工作的难点之一。
  - 问题(problem)
    描述了应该在何时使用模式。它解释了设计问题和问题存在的前因后果。它可能描述了特定的设计问题（如怎样用对象表示算法等）​，也可能描述了导致不灵活设计的类或对象结构。有时候，问题部分会包括使用模式必须满足的一系列先决条件。
  - 解决方案(solution)
    描述了设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象组合）来解决这个问题。
  - 效果(consequence)
    描述了模式应用的效果及使用模式应权衡的问题。尽管我们描述设计决策时并不总提到模式效果，但它们对于评价设计选择和理解使用模式的代价及好处具有重要意义。软件效果大多关注对时间和空间的衡量，它们也表述了语言和实现问题。因为复用是面向对象设计的要素之一，所以模式效果包括它对系统的灵活性、扩充性或可移植性的影响，显式地列出这些效果对理解和评价这些模式很有帮助。

** 1.2 Smalltalk MVC 中的设计模式
MVC 包括三类对象:
  - 模型(Model)是应用对象。
  - 视图(View)是它在屏幕上的表示。
  - 控制器(Controller)定义用户界面对用户输入的响应方式。
不使用 MVC，用户界面设计往往将这些对象混在一起，而 MVC 则将它们分离以提高灵活性和复用性。

MVC 通过建立一个“订购/通知”协议来分离视图和模型。视图必须保证它的显示正确地反映了模型的状态。一旦模型的数据发生变化，模型将通知有关的视图，每个视图相应地得到刷新自己的机会。这种方法可以让你为一个模型提供不同的多个视图表现形式，也能够为一个模型创建新的视图而无须重写模型。

MVC 允许你在不改变视图外观的情况下改变视图对用户输入的响应方式。例如，你可能希望改变视图对键盘的响应方式，或希望使用弹出菜单而不是原来的命令键方式。 MVC 将响应机制封装在 Controller 对象中。存在着一个 Controller 的类层次结构，使得可以方便地对原有 Controller 做适当改变而创建新的 Controller。

View 使用 Controller 子类的实例来实现一个特定的响应策略。要实现不同的响应策略只要用不同种类的 Controller 实例替换即可。甚至可以在运行时通过改变 View 的 Controller 来改变 View 对用户输入的响应方式。例如，一个 View 可以被禁止接收任何输入，只需给它一个忽略输入事件的 Controller。

View-Controller 关系是 Strategy(5.9) 模式的一个例子。一个策略是一个表述算法的对象。当你想静态或动态地替换一个算法，或你有很多不同的算法，或算法中包含你想封装的复杂数据结构时，策略模式是非常有用的。

MVC 的主要关系还是由 Observer、Composite 和 Strategy 三个设计模式给出的。

** 1.4 设计模式的编目
23 个设计模式：
  - Abstract Factory(3.1)
    提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。
  - Adapter(4.1)
    将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
  - Bridge(4.2)
    将抽象部分与它的实现部分分离，使它们都可以独立地变化。
  - Builder(3.2)
    将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
  - Chain of Responsibility(5.1)
    解除请求的发送者和接收者之间的耦合，使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。
  - Command(5.2)
    将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。
  - Composite(4.3)
    将对象组合成树形结构以表示“部分–整体”的层次结构。Composite使得客户对单个对象和组合对象的使用具有一致性。
  - Decorator(4.4)
    动态地给一个对象添加一些额外的职责。就扩展功能而言，Decorator模式比生成子类方式更为灵活。
  - Facade(4.5) 翻译：外观、表面
    为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
  - Factory Method(3.3)
    定义一个用于创建对象的接口，让子类决定将哪一个类实例化。Factory Method使一个类的实例化延迟到其子类。
  - Flyweight(4.6)
    运用共享技术有效地支持大量细粒度的对象。
  - Interpreter(5.3)
    给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。
  - Iterator(5.4)
    提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。
  - Mediator(5.5) 翻译：传递者
    用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。
  - Memento(5.6) 翻译：n.纪念物,纪念品,引起回忆的东西 n.发人联想的人(或事物);警告,告诫 n.回忆
    在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。
  - Observer(5.7)
    定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动刷新。
  - Prototype(3.4)
    用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。
  - Proxy(4.7)
    为其他对象提供一个代理以控制对这个对象的访问。
  - Singleton(3.5)
    保证一个类仅有一个实例，并提供一个访问它的全局访问点。
  - State(5.8)
    允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它所属的类。
  - Strategy(5.9)
    定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法的变化可独立于使用它的客户。
  - Template Method(5.10)
    定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。 Template Method 使得子类不改变一个算法的结构即可重定义该算法的某些特定步骤。
  - Visitor(5.11)
    表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。

** 1.5 组织编目
[[./图 1-1 设计模式分类.png]]

我们根据两条准则对模式进行分类:
  1. 目的准则（模式是用来完成什么工作的）
     模式依据其目的可分为创建型(creational)、结构型(structural)和行为型(behavioral)三种。创建型模式与对象的创建有关；结构型模式处理类或对象的组合；行为型模式对类或对象怎样交互和怎样分配职责进行描述。
  2. 范围准则
     指定模式主要是用于类还是用于对象。
        - 类模式处理类和子类之间的关系，这些关系通过继承建立，是静态的，在编译时便确定下来了。
        - 对象模式处理对象间的关系，这些关系在运行时是可以变化的，更具动态性。
     从某种意义上来说，几乎所有模式都使用继承机制，所以“类模式”只指那些集中于处理类间关系的模式，而大部分模式都属于对象模式的范畴。
