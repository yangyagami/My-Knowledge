#+TITLE: mysql
#+AUTHOR: Yangsiyu
#+DATE: <2025-03-03 一>
#+EMAIL: a651685099@163.com

* 创建
** 数据库
*数据库名字是唯一的。*
#+BEGIN_SRC sql
    CREATE DATABASE 数据库名字;
    USE 数据库名字;
#+END_SRC

** 表
*每个数据库的每个表的名字是唯一的。*
*PRIMARY KEY 表示唯一，而且一定不能为空。*
#+BEGIN_SRC sql
  CREATE TABLE 表格名(
      列名1 INT AUTO_INCREMENT PRIMARY KEY,
      列名2 VARCHAR() NOT NULL,
      列名3 DATE NULL
  );
#+END_SRC

** 插入
#+BEGIN_SRC sql
  INSERT INTO 数据库名.表名(
      列名1,
      列名2,
      列名3
  )
  VALUES (
      数值1,
      数值2,
      数值3
  );
#+END_SRC

例如，这里创建一个 test 数据库，然后创建一个 record 表：
#+BEGIN_SRC sql
  CREATE DATABASE test;
  USE test;

  CREATE TABLE record (
      id INT PRIMARY KEY AUTO_INCREMENT,
      name varchar(32) NOT NULL,
      age INT NOT NULL,
      birth_date DATE NULL
  );

  insert into test.record (id, name, age, birth_date)
  values (1, 'Kitty', 23, '2000-03-26');

  insert into test.record
  values (2, 'John', 25, '2000-02-26');

  insert into test.record
  values (DEFAULT, 'Yang', 25, NULL);
#+END_SRC

* 更新
** 新增列
#+BEGIN_SRC sql
  ALTER TABLE 数据库名.表名
  ADD 列名 数据类型 默认条件;
#+END_SRC

现在假设要给 record 表新增加一个 gender 列：
#+BEGIN_SRC sql
  ALTER TABLE test.record
  ADD gender VARCHAR(10) NOT NULL;
#+END_SRC

** 更改表中的值
#+BEGIN_SRC sql
  UPDATE 数据库名.表名
  SET 数值
  WHERE 条件;
#+END_SRC

设置 id == 3 的行的出生日期：
#+BEGIN_SRC sql
  UPDATE test.record
  SET birth_date = '2000-02-26'
  WHERE id = 3;
#+END_SRC

*在 sql 的不同上下文下， '=' 有赋值和比较两种意思。*

* 删除
** 删除一条数据
#+BEGIN_SRC sql
  DELETE FROM 数据库名.表名
  WHERE 条件;
#+END_SRC

删除 id == 1 的那一条数据：
#+BEGIN_SRC sql
  DELETE FROM test.record
  WHERE id = 1;
#+END_SRC

** 删除表
#+BEGIN_SRC sql
  DROP TABLE 数据库名.表名;
#+END_SRC

#+BEGIN_SRC sql
  DROP TABLE test.record;
#+END_SRC

** 删除数据库
#+BEGIN_SRC sql
  DROP DATABASE 数据库名;
#+END_SRC

#+BEGIN_SRC sql
  DROP DATABASE test;
#+END_SRC

* 查询
** 表查询
#+BEGIN_SRC sql
  SELECT * FROM 表名;
  SELECT 列名1, 列名2 FROM 表名;
#+END_SRC

查看表格全部数据:
#+BEGIN_SRC sql
  SELECT * FROM Egg_database.Covid_month;
#+END_SRC

查看指定的数据:
#+BEGIN_SRC sql
  SELECT Country, Confirmed, Continent FROM Egg_database.Covid_month;
#+END_SRC

*** 查询不同的数值
#+BEGIN_SRC sql
  SELECT DISTINCT 列名1 FROM 表名;
#+END_SRC

例如：
#+BEGIN_SRC sql
  SELECT DISTINCT Continent FROM Egg_database.Covid_month;
#+END_SRC

*** 排序
#+BEGIN_SRC sql
  SELECT * FROM 表名 ORDER BY 列名;  # 默认为升序排序
  SELECT * FROM 表名 ORDER BY 列名 ASC;  # 升序排序
  SELECT * FROM 表名 ORDER BY 列名 DESC;  # 降序排序
#+END_SRC

例如：
#+BEGIN_SRC sql
  SELECT * FROM Egg_database.Covid_month ORDER BY Confirmed;  # 默认为升序排序
#+END_SRC

*** 条件查询
#+BEGIN_SRC sql
  SELECT * FROM 表名 WHERE 条件 ORDER BY 列名;  # 默认为升序排序
  SELECT * FROM 表名 WHERE 条件 ORDER BY 列名 ASC;  # 升序排序
  SELECT * FROM 表名 WHERE 条件 ORDER BY 列名 DESC;  # 降序排序
#+END_SRC

- 比较运算符
| =       | 等于      |
| != 或 <> | 不等于     |
| >       | 大于      |
| <       | 小于      |
| >=      | 大于等于   |
| <=      | 小于等于   |
| BETWEEN | 两数值之间，闭合区间 |
| IN      | 一组数值里 |
| LIKE    | 相似匹配   |

- 逻辑运算符
| AND     | 与 |
| OR      | 或 |
| NOT 或 ! | 非 |

例如，查询康复数量大于等于 1000000 的：
#+BEGIN_SRC sql
  SELECT * FROM Egg_database.Covid_month
  WHERE Recovered >= 1000000
  ORDER BY Confirmed DESC;  # 降序排序
#+END_SRC

查询康复数量大于等于 1000000 的，并且国家不是 Brazil 的：
#+BEGIN_SRC sql
  SELECT * FROM Egg_database.Covid_month
  WHERE Recovered >= 1000000 AND Country != 'Brazil'
  ORDER BY Confirmed DESC;  # 降序排序
#+END_SRC

查询康复数量小于 1000000 的，并且国家不是 Brazil 的：
#+BEGIN_SRC sql
  SELECT * FROM Egg_database.Covid_month
  WHERE NOT Recovered >= 1000000 AND Country != 'Brazil'
  ORDER BY Confirmed DESC;  # 降序排序
#+END_SRC

查询康复数量 >= 1000000 && <= 1200000 的：
#+BEGIN_SRC sql
  SELECT * FROM Egg_database.Covid_month
  WHERE Recovered BETWEEN 1000000 AND 1200000
  ORDER BY Confirmed DESC;  # 降序排序
#+END_SRC

查询国家在 Brazil 和 India 里面的：
#+BEGIN_SRC sql
  SELECT * FROM Egg_database.Covid_month
  WHERE Country IN ('Brazil', 'India')
  ORDER BY Confirmed;
#+END_SRC
